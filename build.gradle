plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id("io.papermc.paperweight.userdev") version "1.7.7"
}

group = 'jp.reitou_mugicha'
version = '1.0'

repositories {
    mavenLocal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = uri("https://repo.opencollab.dev/main/")
    }
    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    compileOnly('org.geysermc.floodgate:api:2.2.3-SNAPSHOT')
    compileOnly('org.geysermc.floodgate:api:2.2.3-SNAPSHOT')
    compileOnly('org.geysermc.geyser:api:2.4.2-SNAPSHOT')
    

    implementation 'com.github.kangarko:Foundation:6.9.17'
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
    paperweight.paperDevBundle("1.21.3-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveBaseName.set("${project.name}")
    archiveVersion.set("${project.version}")

    dependencies {
        include(dependency("com.github.kangarko:Foundation"))
    }

    //relocate 'org.mineacademy.fo', "${project.group}.foundation"
}

tasks.register('buildPlugin', Jar) {
    group = 'build'
    description = 'Builds the plugin JAR and copies it to the Minecraft server plugin directory.'
    from sourceSets.main.output
    archiveFileName.set("${project.name}.jar")

    doLast {
        copy {
            from archiveFile
            into '/Users/User/Documents/MinecraftServer/CrossPlay_OpenServer/plugins/'
        }
    }
}